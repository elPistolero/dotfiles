if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source '~/.vimrc'
endif

call plug#begin('~/.vim/plugged')

" bundles on github
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/goyo.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-fugitive'
Plug 'bkad/CamelCaseMotion'
Plug 'derekwyatt/vim-fswitch'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'bronson/vim-trailing-whitespace'
Plug 'sjl/gundo.vim'
Plug 'nelstrom/vim-visual-star-search'
Plug 'terryma/vim-multiple-cursors'
Plug 'wellle/targets.vim'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'christoomey/vim-tmux-navigator'
Plug 'stephpy/vim-yaml'
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-fuzzy.vim'
Plug 'elzr/vim-json'
Plug 'morhetz/gruvbox'
Plug 'lervag/vimtex'
Plug 'jmcantrell/vim-virtualenv'
Plug 'davidhalter/jedi-vim'
if has('nvim') || (v:version >= 800)
  Plug 'w0rp/ale'
endif
Plug 'Chiel92/vim-autoformat'
Plug 'milkypostman/vim-togglelist'
Plug 'hynek/vim-python-pep8-indent'
Plug 'ludovicchabant/vim-gutentags'
Plug 'pseewald/vim-anyfold'
Plug 'easymotion/vim-easymotion'
Plug 'michaeljsmith/vim-indent-object'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'tpope/vim-sleuth'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'zchee/deoplete-jedi'
endif
if ! has('nvim') && has('lua')
  Plug 'Shougo/neocomplete'
endif

call plug#end()

" gruvbox
colorscheme gruvbox

"Tagbar
let g:tagbar_autofocus = 1
let g:tagbar_autoshowtag = 1
let g:tagbar_type_tex = {
      \ 'ctagstype' : 'latex',
      \ 'kinds'     : [
      \ 's:sections',
      \ 'g:graphics:0:0',
      \ 'l:labels',
      \ 'r:refs:1:0',
      \ 'p:pagerefs:1:0'
      \ ],
      \ 'sort'    : 0,
      \ 'deffile' : expand('~/latex.cnf')
      \ }

"nerdtree
let NERDTreeHijackNetrw=1
let g:nerdtree_tabs_open_on_gui_startup=0

" airline
let g:airline_theme='gruvbox'
let g:airline_exclude_preview=1
let g:airline#extensions#tabline#enabled=1

"fzf
let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'

" incsearch
let g:incsearch#auto_nohlsearch = 1

"vim-json
let g:vim_json_syntax_conceal = 0

"deoplete
if has('nvim')
  let g:jedi#completions_enabled = 0
  let g:deoplete#enable_at_startup = 1
  if !exists('g:deoplete#omni#input_patterns')
    let g:deoplete#omni#input_patterns = {}
  endif
  let g:deoplete#omni#input_patterns.tex = '\\(?:'
        \ .  '\w*cite\w*(?:\s*\[[^]]*\]){0,2}\s*{[^}]*'
        \ . '|\w*ref(?:\s*\{[^}]*|range\s*\{[^,}]*(?:}{)?)'
        \ . '|hyperref\s*\[[^]]*'
        \ . '|includegraphics\*?(?:\s*\[[^]]*\]){0,2}\s*\{[^}]*'
        \ . '|(?:include(?:only)?|input)\s*\{[^}]*'
        \ . '|\w*(gls|Gls|GLS)(pl)?\w*(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
        \ . '|includepdf(\s*\[[^]]*\])?\s*\{[^}]*'
        \ . '|includestandalone(\s*\[[^]]*\])?\s*\{[^}]*'
        \ .')'
endif

"neocomplete
if ! has('nvim') && has('lua')
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  let g:neocomplete#sources#omni#input_patterns.tex =
        \ '\v\\%('
        \ . '\a*cite\a*%(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
        \ . '|\a*ref%(\s*\{[^}]*|range\s*\{[^,}]*%(}\{)?)'
        \ . '|hyperref\s*\[[^]]*'
        \ . '|includegraphics\*?%(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
        \ . '|%(include%(only)?|input)\s*\{[^}]*'
        \ . '|\a*(gls|Gls|GLS)(pl)?\a*%(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
        \ . '|includepdf%(\s*\[[^]]*\])?\s*\{[^}]*'
        \ . '|includestandalone%(\s*\[[^]]*\])?\s*\{[^}]*'
        \ . ')'
  let g:jedi#completions_enabled = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#smart_auto_mappings = 0
  let g:neocomplete#force_omni_input_patterns.python =
        \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
  " alternative pattern: '\h\w*\|[^. \t]\.\w*'s = {}
endif

"gutentags
" don't use defaults like .git because of subprojects
let g:gutentags_add_default_project_roots = 0
" use existing tags file for root detection
let g:gutentags_project_root = ['tags']

"vim-anyfold
let anyfold_activate=1
let anyfold_fold_comments=1
set foldlevel=4

"vim-togglelist
let g:toggle_list_no_mappings = 1
nmap <script> <silent> ,l :call ToggleLocationList()<CR>
nmap <script> <silent> ,q :call ToggleQuickfixList()<CR>

"vimtex
let g:vimtex_view_general_viewer = 'okular'
let g:vimtex_view_general_options = '--unique @pdf\#src:@line@tex'
let g:vimtex_view_general_options_latexmk = '--unique'

"ale
if has('nvim') || (v:version >= 800)
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_python_pylint_options = "--init-hook='import sys; sys.path.append(\".\")'"
  let g:ale_python_flake8_args = "--ignore=E231"
  let g:ale_linters = {
        \ 'python': ['flake8'],
  \}
endif
