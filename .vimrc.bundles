if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source '~/.vimrc'
endif

call plug#begin('~/.vim/plugged')

" bundles on github
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sleuth'
Plug 'derekwyatt/vim-fswitch'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'bronson/vim-trailing-whitespace'
Plug 'christoomey/vim-tmux-navigator'
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-fuzzy.vim'
Plug 'morhetz/gruvbox'
Plug 'lervag/vimtex'
Plug 'jmcantrell/vim-virtualenv'
if has('nvim') || (v:version >= 800)
  Plug 'w0rp/ale'
endif
Plug 'milkypostman/vim-togglelist'
Plug 'ludovicchabant/vim-gutentags'
Plug 'Valloric/YouCompleteMe' ", { 'do': './install.py --clang-completer' }
Plug 'sheerun/vim-polyglot'

call plug#end()

" gruvbox
colorscheme gruvbox

"Tagbar
let g:tagbar_autofocus = 1
let g:tagbar_autoshowtag = 1
let g:tagbar_type_tex = {
      \ 'ctagstype' : 'latex',
      \ 'kinds'     : [
      \ 's:sections',
      \ 'g:graphics:0:0',
      \ 'l:labels',
      \ 'r:refs:1:0',
      \ 'p:pagerefs:1:0'
      \ ],
      \ 'sort'    : 0,
      \ 'deffile' : expand('~/latex.cnf')
      \ }

"nerdtree
let NERDTreeHijackNetrw=1
let g:nerdtree_tabs_open_on_gui_startup=0

" airline
let g:airline_theme='gruvbox'
let g:airline_exclude_preview=1
let g:airline#extensions#tabline#enabled=1

"fzf
let $FZF_DEFAULT_COMMAND = 'fd --type f --hidden --follow --exclude .git'

" incsearch
let g:incsearch#auto_nohlsearch = 1

"gutentags
" don't use defaults like .git because of subprojects
let g:gutentags_add_default_project_roots = 0
" use existing tags file for root detection
let g:gutentags_project_root = ['tags']

"vim-togglelist
let g:toggle_list_no_mappings = 1
nmap <script> <silent> ,l :call ToggleLocationList()<CR>
nmap <script> <silent> ,q :call ToggleQuickfixList()<CR>

"polyglot
let g:polyglot_disabled = ['latex']

"vimtex
let g:vimtex_view_method = 'zathura'
let g:vimtex_view_general_options = '--unique @pdf\#src:@line@tex'
let g:vimtex_view_general_options_latexmk = '--unique'
"let g:vimtex_compiler_progname = 'nvr'
let g:vimtex_quickfix_open_on_warning = 0
let g:tex_flavor = 'latex'

"ale
if has('nvim') || (v:version >= 800)
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_python_pylint_options = "--init-hook='import sys; sys.path.append(\".\")'"
  let g:ale_python_flake8_options = "--ignore=E231,E226,E501"
  let g:ale_linters = {
        \ 'python': ['flake8'], 'cpp': [], 'c': []
  \}
endif

" YCM
let g:ycm_python_binary_path = 'python'
nnoremap <leader>gg :YcmCompleter GoTo<CR>
nnoremap <leader>gr :YcmCompleter GoToReferences<CR>
nnoremap K :YcmCompleter GetDoc<CR>
if !exists('g:ycm_semantic_triggers')
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme
